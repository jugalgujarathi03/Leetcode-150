1) Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


SOLUTION:

1) Brute Force:
keep the i pointer on 1st element and for every i j pointer i+1 th element
iterate j through to array for every i if arr[i]==arr[j] return "true"
else keep traversing i until i <len(arr)-1
if i loop is completed return False

Time complexity:O(n^2)
Space complexity:O(1)

Code:
class Solution {
    public boolean containsDuplicate(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j])
                    return true;
            }
        }
        return false;
    }
}


2)SORTING:
Sort the array and compare i-1 and ith element if same return true else return false
for(i<len(arr))

time:O(NlogN)
space:O(1)

code:
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1])
                return true;
        }
        return false;
    }
}


3)HASHSET:
traverse through the arary maintainig a hashset if an element occurs inside a hashset return True and if current element is not in the hashset return false and move forward
if loop is completed then return false.

time:O(n)
space:O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> seen = new HashSet<>();
        for (int num : nums) {
            if (seen.contains(num))
                return true;
            seen.add(num);
        }
        return false;
    }
}
